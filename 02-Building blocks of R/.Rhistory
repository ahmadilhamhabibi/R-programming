print(c("The result of 2 + 3 is", result, "Cool"))
result <- 2 + 3
print(c("The result of 2 + 3 is", result, "Cool"))
setwd("~/GitHub/R-programming/Building blocks of R")
# object name <- value
bob <- 7
bob*2
print(bob)
a <- 1:10
print(a)
a*2
# EXERCISE 1 - CREATING OBJECT
X <- 10:20
Y <- X*2
Y <- X+2
Z <- Y*3
subtract <- Z-6
answer <- subtract/3
print(answer)
answer <- ((X + 2) * 3 - 6 ) / 3
answer
x <- 10:20
y <- x+2
z <- y*3
subtract <- z-6
answer <- subtract/3
answer
print("answer")
answer
answer_one = ((x+2)*3-6)/3)
answer_one = ((x+2)*3-6)/3
answer_one
a <- 1:10
bob <- 7
is.vector(a)
is.vector(bob)
# 1. Integer : whole number; whit nothing after the decimal
int <- c(5, 6, 7, 8)
# 1. Integer : whole number; whit nothing after the decimal
int <- c(5L, 6L, 7L, 8L)
typeof(int)
# 2. Double : store regular numbers (large, small, positive, negative, with or without decimal digits)
# the default in R is double
double <- (5, 6, 7, 8)
# 2. Double : store regular numbers (large, small, positive, negative, with or without decimal digits)
# the default in R is double
double <- c(5, 6, 7, 8)
typeof(double)
# 3. Character : store text data
char <- c("R", "for", "life")
typeof(char)
char2 <- c("the answer tp life", "the universe". "and everything", "is", "42")
char2 <- c("the answer tp life", "the universe", "and everything", "is", "42")
typeof(char2)
# 4. Logical : store Boolean data (TRUE T and FALSE F)
spock <- c(FALSE, TRUE, F, F, T, FALSE)
typeof(spock)
employee_names <- c("Ahmad", "Ilham", "Habibi", "Emma", "Febryanti")
typeof(employee_names)
salary <- c(2000, NA, 3000, NA, 4000)
typeof(salary)
employee <- c(employee_names, salary)
typeof(employee)
char2 <- c("the answer tp life", "the universe", "and everything", "is", 42)
typeof(char2)
print(char2)
spock <- c(FALSE, TRUE, F, F, 1, 0)
typeof(spock)
print(spock)
# COERCION EXERCICE
yearly_bonus <- (T, T, T, F, F)
# COERCION EXERCICE
yearly_bonus <- c(T, T, T, F, F)
coerce_check <- c(salary, yearly_bonus)
typeof(coerce_check)
print(coerce_check)
round(3,7858)
mean(1:10)
mean(a)
mean(a)
b <- mean(1:10)
mean(b)
round(mean(b))
round(b)
a <- (10:20)
b <- mean(a)
round(b)
# FUNCTION EXERCISE
years_of_experience <- c(8, 9 , 10, 10, 5)
sum(years_of_experience)
mean(years_of_experience)
median(years_of_experience)
len(years_of_experience)
length(years_of_experience)
sd(years_of_experience)
round(sd(years_of_experience))
print(round(sd(years_of_experience)))
args(round)
round(3.576898, 2)
round(3.576898, digits = 2)
round(digits = 2, 3.576898)
args(sample)
args(median)
median(years_of_experience)
median(years_of_experience, na.rm = TRUE)
median(salary, na.rm = TRUE)
median(salary)
median(salary, na.rm = TRUE)
deck <- c("Duke", "Assasin", "Captain", "Ambassador", "Contessa")
print(deck)
sample(deck, size = 3)
sample(deck, size = 3)
sample(deck, size = 3)
sample(deck, size = 3)
sample(deck, size = 3, replace = TRUE)
sample(deck, size = 3, replace = TRUE)
sample(deck, size = 3, replace = TRUE)
sample(deck, size = 3, replace = TRUE)
sample(deck, size = 3, replace = TRUE)
print(hand)
hand <- sample(deck, size = 3, replace = TRUE)
print(hand)
print(hand)
print(hand)
print(hand)
draw <- function(){
deck <- c("Duke", "Assasin", "Captain", "Ambassador", "Contessa")
hand <- sample(deck, size = 3, replace = TRUE)
print(hand
}
draw <- function(){
deck <- c("Duke", "Assasin", "Captain", "Ambassador", "Contessa")
hand <- sample(deck, size = 3, replace = TRUE)
print(hand)
}
draw()
draw()
draw()
draw()
draw()
draw()
draw()
flip <- function(){
coin <- c("heads", "tails")
toss <- sample(coin, 100, replace = TRUE, prob = c(0.3, 0.7))
return(toss)
}
flip()

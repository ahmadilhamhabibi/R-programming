x <- 10:20
x + 2
y = x + 2
z = y * 3
x
y <- x + 2
z <- y*3
suntotal <- z -6
answer <- suntotal/3
answer
employee_names <- c("Belinda Johnes","Maria Delar", "Math Smith", "Matt Williams", "Robert Mathews","Julia Walters", "Andrea Cheng", "July Horitz", "Danielle Muller", "Esteban Lugo")
typeof(employee_names)
salary <- c(3000, NA, NA, NA, NA, 4000, 3000, 5000, 1000, 5000)
typeof(salary)
employees <- c(employee_names, salary)
typeof(employees)
setwd("~/GitHub/R-programming/04-Matrices")
mtrx <- matrix(1:12, nrow = 3)
mtrx
mtrx <- matrix(1:12, ncol = 4)
mtrx
mtrx <- matrix(1:12, ncol = 4, byrow = TRUE)
mtrx
usa <- c(1.3, 1.5, 1.2, 1.4, 1.5)
usa
de <- c(0.2, 0.4, 0.7, 0.8, 0.8)
de
ngo <- cbind(usa, de)
ngo
# naming columns and rows
rownames(ngo) <- c("2013", "2014", "2015", "2016", "2017")
ngo
# transposes
ngo <- t(ngo)
ngo
ind <- c(2, 2.2, 2.4, 2.5, 2.6)
ngo <- rbind(ngo, ind)
ngo
# create matrix with single-line code
gdp <- matrix(c(47.9, 41.2, 41.9, 54.6, 56.2, 57.5, 1.6, 1.6, 1.7),
nrow = 3, byrow = TRUE,
dimnames = list(c("de", "usa", "ind"),
c("2014", "2015", "2016")))
gdp
Player <- c("dark", "dark", "dark", "dark", "dark", "light", "light", "light", "light", "light",)
Piece <- c("king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn", )
Player <- c("dark", "dark", "dark", "dark", "dark", "light", "light", "light", "light", "light")
Piece <- c("king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn")
# create matrix with dim()
chess<-c(Player, Piece)
chess
chess<-c(Player, Piece)
dim(chess) <- c(10, 2)
chess
colnames(chess) <- c("Player", "Piece")
chess
chess.mat <- matrix(chess, nrow = 10, dimnames = list(NULL, c("Player", "Piece")))
chess.mat
chess.bind = cbind("Player" = Player, "Piece" = Piece)
chess.bind
gross <- c(381, 1340, 318, 975, 396, 960, 292,
940, 302, 934, 290, 897, 262, 879, 249, 797)
hp.mat <- matrix(gross, nrow = 8, byrow = T)
hp.mat
# indexing
hp.mat[6, 2]
hp.mat[6]
hp.mat[6,]
hp.mat[,2]      # index all column
# slicing
hp.mat[c(1, 3, 7), ]    # select multiple rows
hp.snip = hp.mat[c(1, 3, 7), ]    # select multiple rows
hp.snip
colnames(hp.mat) <- c("USA", "Worldwide")
row.names(hp.mat) <- c("Hallows Part 2", "Sorcerer's Stone", "Hallows Part 1",
"Order", "Prince", "Goblet", "Chamber", "Prisoner")
hp.mat
# slicing with name
hp.mat["Goblet",]
hp.mat[ ,"USA"]
#-----CREATING A MATRIX-----
Player <- c("dark", "dark", "dark", "dark", "dark", "light", "light", "light", "light", "light")
Piece <- c("king", "queen", "pawn", "pawn", "knight", "bishop", "king", "rook", "pawn", "pawn")
# create matrix with dim()
chess<-c(Player, Piece)
dim(chess) <- c(10, 2)
colnames(chess) <- c("Player", "Piece")
chess
# create matrix with matrix()
chess.mat <- matrix(chess, nrow = 10, dimnames = list(NULL, c("Player", "Piece")))
chess.mat
# create matrix with cbind()
chess.bind = cbind("Player" = Player, "Piece" = Piece)
chess.bind
#-----Slicing and Indexing Matrix-----
#-----Slicing and Indexing Matrix-----
chess
chess <- t(chess)
chess
turn <- c(3, 5, 2, 2, 7, 4, 6, 5, 2, 1)
chess <- rbind(chess, "Turn" = turn)
chess
chess <- t(chess)
chess
#The first piece of the light player
chess[6, 2]
#The Player and Piece columns
chess[ ,1:2]
chess[ ,-3]
#All the information about the dark player
chess[1:5, ]
#The Pieces column; try to extract that as a matrix (Hint: lookup the drop = argument)
chess[,2]
#The Pieces column; try to extract that as a matrix (Hint: lookup the drop = argument)
chess[ , 2, drop = F]
#Everything but the Piece column
chess[ , -2, drop = F]
#The 1st and 3rd values on the second row
chess[ 2, c(1,3)]
#Replace the 3rd value on the 7th row with 3 (Hint: works just like creating an object)
chess[7,3] <- 3
chess
b.office <- c(171.5, 292, 281.6, 460.6, 139.3, 288)
matrix.mat <- matrix(b.office, nrow = 3, byrow = T,
dimnames = list(c("The Matrix", "Reloaded", "Revolutions"),
c("US", "Worldwide")))
matrix.mat
matrix.scaled <- matrix.mat/1000
matrix.scaled
avg.margin <- matrix.mat - 121
avg.margin
bugdet <- matric(c(63, 150, 150), nrow = 3, ncol = 2)
bugdet
bugdet <- matric(c(63, 150, 150), nrow = 3, ncol = 2)
bugdet <- matrix(c(63, 150, 150), nrow = 3, ncol = 2)
bugdet
budget <- matrix(c(63, 150, 150), nrow = 3, ncol = 2)
budget
margin <- matrix.mat - budget
margin
v <- matrix(c(1:6), nrow = 3)
v
matrix.multiplied <- matrix.mat*v
matrix.multiplied
my.mat <- matrix(runif(12), nrow = 3, byrow = TRUE, dimnames = list(c("x", "y", "z"),
c("uno", "dos", "tres", "cuatro")))
my.mat
my.mat <- my.mat*10
my.mat
s.mat <- my.mat[1:2, ]
s.mat
my.mat - s.mat
m.mat <- my.mat[ , -4]
my.mat - m.mat
uno <- my.mat[, "uno"]
my.mat - uno
new.mat <- matrix(rnorm(12), nrow = 3, byrow = TRUE)
new.mat
my.mat * new.mat
# Perform matrix multiplication (using the * sign).
# Can you do that? How is the operation carried out?
my.mat * new.mat
# Perform inner matrix multiplication with the two matrixes.
# Can you do that? Why? Can you think of something to do to make this possible?
my.mat %*% t(new.mat)
matrix.mat
colSums(matrix.mat)
rowSums(matrix.mat)
colMeans(matrix.mat)
rowMeans(matrix.mat)
total = colSums(matrix.mat)
rowSums(matrix.mat)
average = colMeans(matrix.mat)
rowMeans(matrix.mat)
matrix.prelim <- rbind(matrix.mat, average, total)
matrix.prelim
# create matrix
n <- matrix(rnorm(25), nrow = 5, byrow = TRUE)
u <- matrix(runif(25), nrow = 5, byrow = TRUE)
# column averages
avg.n <- colMeans(n)
avg.u <- colMeans(u)
# row averages
total.n <- colSums(n)
total.u <- colSums(u)
n.avg.total <- rbind(n, avg.n, total.n)
u.avg.total <- rbind(u, avg.u, total.u)
r.avg.n <- rowMeans(n.avg.total)
r.avg.u <- rowMeans(u.avg.total)
r.total.n <- rowSums(n.avg.total)
r.total.u <- rowSums(u.avg.total)
n.avg.total <- cbind(n.avg.total, r.avg.n, r.total.n)
u.avg.total <- cbind(u.avg.total, r.avg.u, r.total.u)
min(n)
min(u)
max(n)
max(u)
min(n[, 3])
min(u[, 3])
max(n[, 3])
max(u[, 3])
mean(n)
mean(u)
sd(n)
sd(u)
marital.status <- c("Married", "Married", "Single", "Married", "Divorce",
"Widowed", "Divorced")
str(marital.status
marital.status <- c("Married", "Married", "Single", "Married", "Divorce",
"Widowed", "Divorced")
str(marital.status)
marital.status <- c("Married", "Married", "Single", "Married", "Divorce", "Widowed", "Divorced")
str(marital.status)
marital.factor <- factor(marital.status)
marital.factor
marital.status <- c("Married", "Married", "Single", "Married", "Divorced", "Widowed", "Divorced")
str(marital.status)
marital.factor <- factor(marital.status)
marital.factor
typeof(marital.factor)
str(marital.factor)
new.factor <- factor(marital.status,
levels = c("Single", "Married", "Divorced", "Widowed"))
str(new.factor)
levels(new.factor) <- c("s", "m", "d", "w")
str(new.factor)
new.factor <- factor(marital.status,
levels = c("Single", "Married", "Divorced", "Widowed"),
labels = c("Sin", "Mar", "Div", "Wid"))
str(new.factor)
ordered.factor <- factor(marital.status, ordered = T,
levels = c("Single", "Married", "Divorced", "Widowed"))
str(ordered.factor)
my.book <- list("1984", "George Orwell", 1949,
list(c(1:8), c(1:10), c(1:6), "Newspeak"))
my.book
str(my.book)
my.book <- list(Name = "1984", Author = "George Orwell", Published = 1949,
Contents = list(PartOne = c(1:8),
PartTwo = c(1:10),
PartThree = c(1:6),
Appendix = "Newspeak"))
my.book
str(my.book)
names(my.book) <- c("Name", "Author", "Published", "Contents")
str(my.book)
my.book[1:2]
my.book[4]
my.book[[4]]
my.book[[4]][2]
my.book[[4]][[2]
my.book[[4]][[2]]
my.book[[4]][[2]]

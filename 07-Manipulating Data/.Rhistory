x <- 10:20
x + 2
y = x + 2
z = y * 3
x
y <- x + 2
z <- y*3
suntotal <- z -6
answer <- suntotal/3
answer
employee_names <- c("Belinda Johnes","Maria Delar", "Math Smith", "Matt Williams", "Robert Mathews","Julia Walters", "Andrea Cheng", "July Horitz", "Danielle Muller", "Esteban Lugo")
typeof(employee_names)
salary <- c(3000, NA, NA, NA, NA, 4000, 3000, 5000, 1000, 5000)
typeof(salary)
employees <- c(employee_names, salary)
typeof(employees)
setwd("~/GitHub/R-programming/07-Manipulating Data")
library(tidyverse)
star = starwars
star
library(tidyverse)
star = starwars
star
View(star)
filter(star, species == "Droid")
filter(star, species == "Droid", homeworld == "Tatooine")
filter(star, eye_color == "red" | eye_color == "yellow" | eye_color == "orange")
filter(star, eye_color == "red" | eye_color == "yellow" | eye_color == "orange",
species == "Human")
select(star, name, birtf_year, homeworld, species, starships)
select(star, name, birtd_year, homeworld, species, starships)
select(star, name, birth_year, homeworld, species, starships)
select(star, name, homeworld:starships)
select(star, ends_with("color"))
select(star, name, vehicles, starships,  everything())
star = mutate(star, bmi = mass/((height/100)^2))
select(star, name:bmi)
star = mutate(star, bmi = mass/((height/100)^2))
select(star, name:bmi)
select(star, name:bmi)
star.trans = transmute(star, bmi = mass/((height/100)^2))
star.trans
arrange(star, mass)
arrange(star, desc(mass))
summarize(star, avg.height = mean(height, na.rm = T))
star.species = group_by(star, species)
summarize(star.species, avg.height = mean(height, na.rm = T)
summarize(star.species, avg.height = mean(height, na.rm = T))
summarize(star, avg.height = mean(height, na.rm = T))
star.species = group_by(star, species)
summarize(star.species, avg.height = mean(height, na.rm = T))
# samplig data
sample_n(star, 10)
sample_frac(star, 0.1)
library(tidyverse)
star = starwars
star.species = group_by(star, species)
star.smr = summarize(star.species, count = n(), avg.mass = mean(mass, na.rm = T))
filter(star.smr, count > 1)
filter(summarize(group_by(star, species), count = n(), avg.mass = mean(mass, na.rm = T)), count > 1)
star %>%
group_by(species) %>%
summarize(count = n(), avg.mass = mean(mass, na.rm = T)) %>%
filter(count > 1)
library(tibble)
library(dplyr)
#If you have saved the data set outside the default R library, make sure you include the path using \ slashes. Example:
#employee.data <- read.csv("c:\users\documents\employee-data.csv", skip = 23, stringsAsFactors = FALSE)
employee.data <- read.csv("employee-data.csv", skip = 23, stringsAsFactors = FALSE)
#Convert the data frame into a tibble
employee.data <- as_tibble(employee.data)
#Covert gender and title variables to factors.
employee.data$gender <- as.factor(employee.data$gender)
employee.data$title <- as.factor(employee.data$title)
any(is.na(employee.data))
library(tibble)
library(dplyr)
#If you have saved the data set outside the default R library, make sure you include the path using \ slashes. Example:
#employee.data <- read.csv("c:\users\documents\employee-data.csv", skip = 23, stringsAsFactors = FALSE)
employee.data <- read.csv("employee-data.csv", skip = 23, stringsAsFactors = FALSE)
#Convert the data frame into a tibble
employee.data <- as_tibble(employee.data)
#Covert gender and title variables to factors.
employee.data$gender <- as.factor(employee.data$gender)
employee.data$title <- as.factor(employee.data$title)
library(tibble)
library(dplyr)
#If you have saved the data set outside the default R library, make sure you include the path using \ slashes. Example:
#employee.data <- read.csv("c:\users\documents\employee-data.csv", skip = 23, stringsAsFactors = FALSE)
employee.data <- read.csv("employee_data.csv", skip = 23, stringsAsFactors = FALSE)
#Convert the data frame into a tibble
employee.data <- as_tibble(employee.data)
#Covert gender and title variables to factors.
employee.data$gender <- as.factor(employee.data$gender)
employee.data$title <- as.factor(employee.data$title)
#Checking for missing values -> the Answer is FALSE, so there are no missing values in our data
any(is.na(employee.data))
employee.a <- employee.data %>%
select(ends_with("name"), gender, everything()) %>%
filter(salary >= 70000) %>%
arrange(gender, last_name)
#Check the resulting data frame
employee.a
#Save the good earners employee numbers in a seperate data frame.
good.earners <- employee.a["emp_no"]
group_by(title, gender) %>%
summarise(avg.salary = mean(salary)) %>%
mutate(monthly = avg.salary/12) %>%
arrange(gender, desc(monthly))
# Resulting data frame.
# Overall the salary for different job positions is comparable between female and male workers.
# What we can observe is that the highest paid female employees are members of the senior staff with an yearly salary of over 60025 dollars.
# The highest paid position among male employees is staff, with around 57500 dollars yearly salary. Senior male staff members receive almost the same amount as yearly pay.
# The lowest paid position based on the data is Senior Engineer. Both female and male employees in that category receive an average yearly salary of under 50000 dollars.
# Male Senior engineers have slightly higher salaries, compared to their female counterparts.
employee.b
employee.b <- employee.data %>%
group_by(title, gender) %>%
summarise(avg.salary = mean(salary)) %>%
mutate(monthly = avg.salary/12) %>%
arrange(gender, desc(monthly))
#Earnings by job position and gender. We group the data by job title, as well as gender.
# For each we calculate the average salary, and then divide the number by 12, to get an average monthly salary
employee.b <- employee.data %>%
group_by(title, gender) %>%
summarise(avg.salary = mean(salary)) %>%
mutate(monthly = avg.salary/12) %>%
arrange(gender, desc(monthly))
# Resulting data frame.
# Overall the salary for different job positions is comparable between female and male workers.
# What we can observe is that the highest paid female employees are members of the senior staff with an yearly salary of over 60025 dollars.
# The highest paid position among male employees is staff, with around 57500 dollars yearly salary. Senior male staff members receive almost the same amount as yearly pay.
# The lowest paid position based on the data is Senior Engineer. Both female and male employees in that category receive an average yearly salary of under 50000 dollars.
# Male Senior engineers have slightly higher salaries, compared to their female counterparts.
employee.b
library(tidyverse)
billboard = read.csv("billboard.csv", stringsAsFactors = FALSE)
billboard = as.tibble(billboard)
billboard
billboard %>% gather(x1st.week:x76th.week, key = "week", value = "rank", na.rm = T) %>%
arrange(artist.inverted)
tb = read.csv("tb.csv")
tb = as.tibble(tb)
tb
tb.gathered = tb %>% gather(m.014:f.65 = key = "column", value = "cases", na.rm = T) %>%
arrange(country)
tb.gathered
tb.gathered = tb %>% gather(m.014:f.65 = key = "column", value = "cases", na.rm = T) %>%
arrange(country)
tb = read.csv("tb.csv")
tb = as.tibble(tb)
tb
tb.gathered = tb %>% gather(m.014:f.65 = key = "column", value = "cases", na.rm = T) %>%
arrange(country)
tb.gathered = tb %>% gather(m.014:f.65, key = "column", value = "cases", na.rm = T) %>%
arrange(country)
tb.gathered
tb.separated = tb.gathered %>% separate(column, into = c("sex", "age"), sep = ".")
tb.separated
tb.separated$age = str_replace_all(tb.separated$age, "0", "0-")
tb.separated$age = str_replace_all(tb.separated$age, "0", "0-")
tb.separated$age = str_replace_all(tb.separated$age, "0", "0-")
tb.separated$age = str_replace_all(tb.separated$age, "0", "0-")
tb.separated$age = str_replace_all(tb.separated$age, "0", "0-")
tb.separated$age = str_replace_all(tb.separated$age, "15", "15-")
tb.separated$age = str_replace_all(tb.separated$age, "25", "25-")
tb.separated$age = str_replace_all(tb.separated$age, "35", "35-")
tb.separated$age = str_replace_all(tb.separated$age, "45", "45-")
tb.separated$age = str_replace_all(tb.separated$age, "55", "55-")
tb.separated$age = str_replace_all(tb.separated$age, "65", "65-100")
tb.separated
tb.separated[1,]
tb = read.csv("tb.csv")
tb = as.tibble(tb)
tb
tb.gathered = tb %>% gather(m.014:f.65, key = "column", value = "cases", na.rm = T) %>%
arrange(country)
tb.gathered
tb.separated = tb.gathered %>% separate(column, into = c("sex", "age"), sep = ".")
tb.separated
tb.separated = tb.gathered %>% separate(column, into = c("sex", "age"))
tb.separated
tb.separated$age = str_replace_all(tb.separated$age, "0", "0-")
tb.separated$age = str_replace_all(tb.separated$age, "15", "15-")
tb.separated$age = str_replace_all(tb.separated$age, "25", "25-")
tb.separated$age = str_replace_all(tb.separated$age, "35", "35-")
tb.separated$age = str_replace_all(tb.separated$age, "45", "45-")
tb.separated$age = str_replace_all(tb.separated$age, "55", "55-")
tb.separated$age = str_replace_all(tb.separated$age, "65", "65-100")
tb.separated
tb.separated = tb.separated %>% separate(age, into = c("age.low", "age.high"))
tb.separated
tb.united = tb.separated %>% unite("age_new", c("age.low", "age.high"))
tb.united
weather = read.csv("weather.csv")
weather =as.tibble(weather)
weather
weather.spread = spread(weather, key = elment, value = value)
weather.spread
weather.spread = spread(weather, key = element, value = value)
weather.spread
library(dplyr)
library(tidyr)
library(readr) # parse_number function
library(stringr)
#Tidying the weather data
#Reading the weather data. Make sure you've downloaded the csv file.
#If the csv isn't in your default R directory, make sure you add a directory path using '\' between each folder.# Example :
#weather <- read.csv("C:/Users/pc/Dropbox/365/R PROGRAMMING/data/weather_untidy.csv", stringsAsFactors = FALSE)
weather <- read.csv("weather_untidy.csv", stringsAsFactors = FALSE)
weather <- as.tibble(weather)
# Gather daily measures and remove missing values. If you take a look at the raw data, you'll observe that there the majority of values are missing.
weather.a <- weather %>% gather(day, value, d1:d31, na.rm = TRUE)
#Arrange measurements by id, year and month.
weather.b <- weather.a %>% mutate(day = parse_number(day)) %>%
select(id, year, month, day, element, value) %>%
arrange(id, year, month, day)
#Include seperate columns for lowest and highest temperature measurments for each data in the data, which were previously seperate rows in the data.
weather.c <- weather.b %>% spread(element, value)
